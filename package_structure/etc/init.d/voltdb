#!/bin/bash -e
#
### BEGIN INIT INFO
# Provides:          voltdb
# Required-Start:    $remote_fs
# Required-Stop:     $remote_fs
# Should-Start:      $named $time
# Should-Stop:       $named $time
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start and stop VoltDB
# Description:       Start and VoltDB Community Edition as a daemon
### END INIT INFO

# Use the lsb functions to perform the operations.
. /lib/lsb/init-functions
# Process name ( For display )
NAME=VoltDB
# Daemon name, where is the actual executable
DAEMON=/usr/share/voltdb/start_service.sh
# pid file for the daemon
PIDFILE=/var/run/voltdb.pid

# If the daemon is not there, then exit.
test -x $DAEMON || exit 5

case $1 in
 start)
  # Checked the PID file exists and check the actual status of process
  if [ -e $PIDFILE ]; then
   status_of_proc -p $PIDFILE $DAEMON "$NAME" && status="0" || status="$?"
   # If the status is SUCCESS then don't start again.
   if [ $status = "0" ]; then
    exit
   fi
  fi
  log_daemon_msg "Starting" "$NAME"
  # Start the daemon
  if start-stop-daemon --start --quiet --oknodo --pidfile $PIDFILE --exec $DAEMON > /dev/null ; then
   log_end_msg 0
  else
   log_end_msg 1
  fi
  ;;
 stop)
  # Stop the daemon.
  if [ -e $PIDFILE ]; then
    log_daemon_msg "Stopping" "$NAME"
     # log_daemon_msg "Stopping the process" "$NAME"
    if start-stop-daemon --stop --quiet --oknodo --retry 5 --pidfile $PIDFILE > /dev/null 2>&1 ; then
      log_end_msg 0
    else
      log_end_msg 1
    fi
   /bin/rm -rf $PIDFILE
  else
   log_success_msg "$NAME is not running"
  fi
  ;;
 restart)
  # Restart the daemon.
  $0 stop && sleep 2 && $0 start
  ;;
 status)
  # Check the status of the process.
  if [ -e $PIDFILE ]; then
   status_of_proc -p $PIDFILE $DAEMON "$NAME" && exit 0 || exit $?
  else
   log_success_msg "$NAME is not running"
  fi
  ;;
 *)
  # For invalid arguments, print the usage message.
  echo "Usage: $0 {start|stop|restart|status}"
  exit 2
  ;;
esac
